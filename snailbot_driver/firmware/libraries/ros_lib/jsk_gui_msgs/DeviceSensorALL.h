#ifndef _ROS_jsk_gui_msgs_DeviceSensorALL_h
#define _ROS_jsk_gui_msgs_DeviceSensorALL_h

#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include "ros/msg.h"

namespace jsk_gui_msgs
{

  class DeviceSensorALL : public ros::Msg
  {
    public:
      float accelerometer_x;
      float accelerometer_y;
      float accelerometer_z;
      float magneticfield_x;
      float magneticfield_y;
      float magneticfield_z;
      float gyroscope_x;
      float gyroscope_y;
      float gyroscope_z;
      float light;
      float pressure;
      bool proximity;
      float gravity_x;
      float gravity_y;
      float gravity_z;
      float linear_acceleration_x;
      float linear_acceleration_y;
      float linear_acceleration_z;
      float rotation_vector_x;
      float rotation_vector_y;
      float rotation_vector_z;
      float rotation_vector_optional;
      float orientation_x;
      float orientation_y;
      float orientation_z;
      float relative_humidity;
      float temperature;
      float ambient_temperature;

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      int32_t * val_accelerometer_x = (int32_t *) &(this->accelerometer_x);
      int32_t exp_accelerometer_x = (((*val_accelerometer_x)>>23)&255);
      if(exp_accelerometer_x != 0)
        exp_accelerometer_x += 1023-127;
      int32_t sig_accelerometer_x = *val_accelerometer_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_accelerometer_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_accelerometer_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_accelerometer_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_accelerometer_x<<4) & 0xF0) | ((sig_accelerometer_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_accelerometer_x>>4) & 0x7F;
      if(this->accelerometer_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_accelerometer_y = (int32_t *) &(this->accelerometer_y);
      int32_t exp_accelerometer_y = (((*val_accelerometer_y)>>23)&255);
      if(exp_accelerometer_y != 0)
        exp_accelerometer_y += 1023-127;
      int32_t sig_accelerometer_y = *val_accelerometer_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_accelerometer_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_accelerometer_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_accelerometer_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_accelerometer_y<<4) & 0xF0) | ((sig_accelerometer_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_accelerometer_y>>4) & 0x7F;
      if(this->accelerometer_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_accelerometer_z = (int32_t *) &(this->accelerometer_z);
      int32_t exp_accelerometer_z = (((*val_accelerometer_z)>>23)&255);
      if(exp_accelerometer_z != 0)
        exp_accelerometer_z += 1023-127;
      int32_t sig_accelerometer_z = *val_accelerometer_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_accelerometer_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_accelerometer_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_accelerometer_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_accelerometer_z<<4) & 0xF0) | ((sig_accelerometer_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_accelerometer_z>>4) & 0x7F;
      if(this->accelerometer_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_magneticfield_x = (int32_t *) &(this->magneticfield_x);
      int32_t exp_magneticfield_x = (((*val_magneticfield_x)>>23)&255);
      if(exp_magneticfield_x != 0)
        exp_magneticfield_x += 1023-127;
      int32_t sig_magneticfield_x = *val_magneticfield_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_magneticfield_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_magneticfield_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_magneticfield_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_magneticfield_x<<4) & 0xF0) | ((sig_magneticfield_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_magneticfield_x>>4) & 0x7F;
      if(this->magneticfield_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_magneticfield_y = (int32_t *) &(this->magneticfield_y);
      int32_t exp_magneticfield_y = (((*val_magneticfield_y)>>23)&255);
      if(exp_magneticfield_y != 0)
        exp_magneticfield_y += 1023-127;
      int32_t sig_magneticfield_y = *val_magneticfield_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_magneticfield_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_magneticfield_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_magneticfield_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_magneticfield_y<<4) & 0xF0) | ((sig_magneticfield_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_magneticfield_y>>4) & 0x7F;
      if(this->magneticfield_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_magneticfield_z = (int32_t *) &(this->magneticfield_z);
      int32_t exp_magneticfield_z = (((*val_magneticfield_z)>>23)&255);
      if(exp_magneticfield_z != 0)
        exp_magneticfield_z += 1023-127;
      int32_t sig_magneticfield_z = *val_magneticfield_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_magneticfield_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_magneticfield_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_magneticfield_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_magneticfield_z<<4) & 0xF0) | ((sig_magneticfield_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_magneticfield_z>>4) & 0x7F;
      if(this->magneticfield_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_gyroscope_x = (int32_t *) &(this->gyroscope_x);
      int32_t exp_gyroscope_x = (((*val_gyroscope_x)>>23)&255);
      if(exp_gyroscope_x != 0)
        exp_gyroscope_x += 1023-127;
      int32_t sig_gyroscope_x = *val_gyroscope_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_gyroscope_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_gyroscope_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_gyroscope_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_gyroscope_x<<4) & 0xF0) | ((sig_gyroscope_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_gyroscope_x>>4) & 0x7F;
      if(this->gyroscope_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_gyroscope_y = (int32_t *) &(this->gyroscope_y);
      int32_t exp_gyroscope_y = (((*val_gyroscope_y)>>23)&255);
      if(exp_gyroscope_y != 0)
        exp_gyroscope_y += 1023-127;
      int32_t sig_gyroscope_y = *val_gyroscope_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_gyroscope_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_gyroscope_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_gyroscope_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_gyroscope_y<<4) & 0xF0) | ((sig_gyroscope_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_gyroscope_y>>4) & 0x7F;
      if(this->gyroscope_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_gyroscope_z = (int32_t *) &(this->gyroscope_z);
      int32_t exp_gyroscope_z = (((*val_gyroscope_z)>>23)&255);
      if(exp_gyroscope_z != 0)
        exp_gyroscope_z += 1023-127;
      int32_t sig_gyroscope_z = *val_gyroscope_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_gyroscope_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_gyroscope_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_gyroscope_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_gyroscope_z<<4) & 0xF0) | ((sig_gyroscope_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_gyroscope_z>>4) & 0x7F;
      if(this->gyroscope_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_light = (int32_t *) &(this->light);
      int32_t exp_light = (((*val_light)>>23)&255);
      if(exp_light != 0)
        exp_light += 1023-127;
      int32_t sig_light = *val_light;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_light<<5) & 0xff;
      *(outbuffer + offset++) = (sig_light>>3) & 0xff;
      *(outbuffer + offset++) = (sig_light>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_light<<4) & 0xF0) | ((sig_light>>19)&0x0F);
      *(outbuffer + offset++) = (exp_light>>4) & 0x7F;
      if(this->light < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_pressure = (int32_t *) &(this->pressure);
      int32_t exp_pressure = (((*val_pressure)>>23)&255);
      if(exp_pressure != 0)
        exp_pressure += 1023-127;
      int32_t sig_pressure = *val_pressure;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_pressure<<5) & 0xff;
      *(outbuffer + offset++) = (sig_pressure>>3) & 0xff;
      *(outbuffer + offset++) = (sig_pressure>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_pressure<<4) & 0xF0) | ((sig_pressure>>19)&0x0F);
      *(outbuffer + offset++) = (exp_pressure>>4) & 0x7F;
      if(this->pressure < 0) *(outbuffer + offset -1) |= 0x80;
      union {
        bool real;
        uint8_t base;
      } u_proximity;
      u_proximity.real = this->proximity;
      *(outbuffer + offset + 0) = (u_proximity.base >> (8 * 0)) & 0xFF;
      offset += sizeof(this->proximity);
      int32_t * val_gravity_x = (int32_t *) &(this->gravity_x);
      int32_t exp_gravity_x = (((*val_gravity_x)>>23)&255);
      if(exp_gravity_x != 0)
        exp_gravity_x += 1023-127;
      int32_t sig_gravity_x = *val_gravity_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_gravity_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_gravity_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_gravity_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_gravity_x<<4) & 0xF0) | ((sig_gravity_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_gravity_x>>4) & 0x7F;
      if(this->gravity_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_gravity_y = (int32_t *) &(this->gravity_y);
      int32_t exp_gravity_y = (((*val_gravity_y)>>23)&255);
      if(exp_gravity_y != 0)
        exp_gravity_y += 1023-127;
      int32_t sig_gravity_y = *val_gravity_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_gravity_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_gravity_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_gravity_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_gravity_y<<4) & 0xF0) | ((sig_gravity_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_gravity_y>>4) & 0x7F;
      if(this->gravity_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_gravity_z = (int32_t *) &(this->gravity_z);
      int32_t exp_gravity_z = (((*val_gravity_z)>>23)&255);
      if(exp_gravity_z != 0)
        exp_gravity_z += 1023-127;
      int32_t sig_gravity_z = *val_gravity_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_gravity_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_gravity_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_gravity_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_gravity_z<<4) & 0xF0) | ((sig_gravity_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_gravity_z>>4) & 0x7F;
      if(this->gravity_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_linear_acceleration_x = (int32_t *) &(this->linear_acceleration_x);
      int32_t exp_linear_acceleration_x = (((*val_linear_acceleration_x)>>23)&255);
      if(exp_linear_acceleration_x != 0)
        exp_linear_acceleration_x += 1023-127;
      int32_t sig_linear_acceleration_x = *val_linear_acceleration_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_linear_acceleration_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_linear_acceleration_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_linear_acceleration_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_linear_acceleration_x<<4) & 0xF0) | ((sig_linear_acceleration_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_linear_acceleration_x>>4) & 0x7F;
      if(this->linear_acceleration_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_linear_acceleration_y = (int32_t *) &(this->linear_acceleration_y);
      int32_t exp_linear_acceleration_y = (((*val_linear_acceleration_y)>>23)&255);
      if(exp_linear_acceleration_y != 0)
        exp_linear_acceleration_y += 1023-127;
      int32_t sig_linear_acceleration_y = *val_linear_acceleration_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_linear_acceleration_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_linear_acceleration_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_linear_acceleration_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_linear_acceleration_y<<4) & 0xF0) | ((sig_linear_acceleration_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_linear_acceleration_y>>4) & 0x7F;
      if(this->linear_acceleration_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_linear_acceleration_z = (int32_t *) &(this->linear_acceleration_z);
      int32_t exp_linear_acceleration_z = (((*val_linear_acceleration_z)>>23)&255);
      if(exp_linear_acceleration_z != 0)
        exp_linear_acceleration_z += 1023-127;
      int32_t sig_linear_acceleration_z = *val_linear_acceleration_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_linear_acceleration_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_linear_acceleration_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_linear_acceleration_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_linear_acceleration_z<<4) & 0xF0) | ((sig_linear_acceleration_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_linear_acceleration_z>>4) & 0x7F;
      if(this->linear_acceleration_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_rotation_vector_x = (int32_t *) &(this->rotation_vector_x);
      int32_t exp_rotation_vector_x = (((*val_rotation_vector_x)>>23)&255);
      if(exp_rotation_vector_x != 0)
        exp_rotation_vector_x += 1023-127;
      int32_t sig_rotation_vector_x = *val_rotation_vector_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_rotation_vector_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_rotation_vector_x<<4) & 0xF0) | ((sig_rotation_vector_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_rotation_vector_x>>4) & 0x7F;
      if(this->rotation_vector_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_rotation_vector_y = (int32_t *) &(this->rotation_vector_y);
      int32_t exp_rotation_vector_y = (((*val_rotation_vector_y)>>23)&255);
      if(exp_rotation_vector_y != 0)
        exp_rotation_vector_y += 1023-127;
      int32_t sig_rotation_vector_y = *val_rotation_vector_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_rotation_vector_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_rotation_vector_y<<4) & 0xF0) | ((sig_rotation_vector_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_rotation_vector_y>>4) & 0x7F;
      if(this->rotation_vector_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_rotation_vector_z = (int32_t *) &(this->rotation_vector_z);
      int32_t exp_rotation_vector_z = (((*val_rotation_vector_z)>>23)&255);
      if(exp_rotation_vector_z != 0)
        exp_rotation_vector_z += 1023-127;
      int32_t sig_rotation_vector_z = *val_rotation_vector_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_rotation_vector_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_rotation_vector_z<<4) & 0xF0) | ((sig_rotation_vector_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_rotation_vector_z>>4) & 0x7F;
      if(this->rotation_vector_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_rotation_vector_optional = (int32_t *) &(this->rotation_vector_optional);
      int32_t exp_rotation_vector_optional = (((*val_rotation_vector_optional)>>23)&255);
      if(exp_rotation_vector_optional != 0)
        exp_rotation_vector_optional += 1023-127;
      int32_t sig_rotation_vector_optional = *val_rotation_vector_optional;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_rotation_vector_optional<<5) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_optional>>3) & 0xff;
      *(outbuffer + offset++) = (sig_rotation_vector_optional>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_rotation_vector_optional<<4) & 0xF0) | ((sig_rotation_vector_optional>>19)&0x0F);
      *(outbuffer + offset++) = (exp_rotation_vector_optional>>4) & 0x7F;
      if(this->rotation_vector_optional < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_orientation_x = (int32_t *) &(this->orientation_x);
      int32_t exp_orientation_x = (((*val_orientation_x)>>23)&255);
      if(exp_orientation_x != 0)
        exp_orientation_x += 1023-127;
      int32_t sig_orientation_x = *val_orientation_x;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_orientation_x<<5) & 0xff;
      *(outbuffer + offset++) = (sig_orientation_x>>3) & 0xff;
      *(outbuffer + offset++) = (sig_orientation_x>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_orientation_x<<4) & 0xF0) | ((sig_orientation_x>>19)&0x0F);
      *(outbuffer + offset++) = (exp_orientation_x>>4) & 0x7F;
      if(this->orientation_x < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_orientation_y = (int32_t *) &(this->orientation_y);
      int32_t exp_orientation_y = (((*val_orientation_y)>>23)&255);
      if(exp_orientation_y != 0)
        exp_orientation_y += 1023-127;
      int32_t sig_orientation_y = *val_orientation_y;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_orientation_y<<5) & 0xff;
      *(outbuffer + offset++) = (sig_orientation_y>>3) & 0xff;
      *(outbuffer + offset++) = (sig_orientation_y>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_orientation_y<<4) & 0xF0) | ((sig_orientation_y>>19)&0x0F);
      *(outbuffer + offset++) = (exp_orientation_y>>4) & 0x7F;
      if(this->orientation_y < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_orientation_z = (int32_t *) &(this->orientation_z);
      int32_t exp_orientation_z = (((*val_orientation_z)>>23)&255);
      if(exp_orientation_z != 0)
        exp_orientation_z += 1023-127;
      int32_t sig_orientation_z = *val_orientation_z;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_orientation_z<<5) & 0xff;
      *(outbuffer + offset++) = (sig_orientation_z>>3) & 0xff;
      *(outbuffer + offset++) = (sig_orientation_z>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_orientation_z<<4) & 0xF0) | ((sig_orientation_z>>19)&0x0F);
      *(outbuffer + offset++) = (exp_orientation_z>>4) & 0x7F;
      if(this->orientation_z < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_relative_humidity = (int32_t *) &(this->relative_humidity);
      int32_t exp_relative_humidity = (((*val_relative_humidity)>>23)&255);
      if(exp_relative_humidity != 0)
        exp_relative_humidity += 1023-127;
      int32_t sig_relative_humidity = *val_relative_humidity;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_relative_humidity<<5) & 0xff;
      *(outbuffer + offset++) = (sig_relative_humidity>>3) & 0xff;
      *(outbuffer + offset++) = (sig_relative_humidity>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_relative_humidity<<4) & 0xF0) | ((sig_relative_humidity>>19)&0x0F);
      *(outbuffer + offset++) = (exp_relative_humidity>>4) & 0x7F;
      if(this->relative_humidity < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_temperature = (int32_t *) &(this->temperature);
      int32_t exp_temperature = (((*val_temperature)>>23)&255);
      if(exp_temperature != 0)
        exp_temperature += 1023-127;
      int32_t sig_temperature = *val_temperature;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_temperature<<5) & 0xff;
      *(outbuffer + offset++) = (sig_temperature>>3) & 0xff;
      *(outbuffer + offset++) = (sig_temperature>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_temperature<<4) & 0xF0) | ((sig_temperature>>19)&0x0F);
      *(outbuffer + offset++) = (exp_temperature>>4) & 0x7F;
      if(this->temperature < 0) *(outbuffer + offset -1) |= 0x80;
      int32_t * val_ambient_temperature = (int32_t *) &(this->ambient_temperature);
      int32_t exp_ambient_temperature = (((*val_ambient_temperature)>>23)&255);
      if(exp_ambient_temperature != 0)
        exp_ambient_temperature += 1023-127;
      int32_t sig_ambient_temperature = *val_ambient_temperature;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = 0;
      *(outbuffer + offset++) = (sig_ambient_temperature<<5) & 0xff;
      *(outbuffer + offset++) = (sig_ambient_temperature>>3) & 0xff;
      *(outbuffer + offset++) = (sig_ambient_temperature>>11) & 0xff;
      *(outbuffer + offset++) = ((exp_ambient_temperature<<4) & 0xF0) | ((sig_ambient_temperature>>19)&0x0F);
      *(outbuffer + offset++) = (exp_ambient_temperature>>4) & 0x7F;
      if(this->ambient_temperature < 0) *(outbuffer + offset -1) |= 0x80;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      uint32_t * val_accelerometer_x = (uint32_t*) &(this->accelerometer_x);
      offset += 3;
      *val_accelerometer_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_accelerometer_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_accelerometer_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_accelerometer_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_accelerometer_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_accelerometer_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_accelerometer_x !=0)
        *val_accelerometer_x |= ((exp_accelerometer_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->accelerometer_x = -this->accelerometer_x;
      uint32_t * val_accelerometer_y = (uint32_t*) &(this->accelerometer_y);
      offset += 3;
      *val_accelerometer_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_accelerometer_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_accelerometer_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_accelerometer_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_accelerometer_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_accelerometer_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_accelerometer_y !=0)
        *val_accelerometer_y |= ((exp_accelerometer_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->accelerometer_y = -this->accelerometer_y;
      uint32_t * val_accelerometer_z = (uint32_t*) &(this->accelerometer_z);
      offset += 3;
      *val_accelerometer_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_accelerometer_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_accelerometer_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_accelerometer_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_accelerometer_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_accelerometer_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_accelerometer_z !=0)
        *val_accelerometer_z |= ((exp_accelerometer_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->accelerometer_z = -this->accelerometer_z;
      uint32_t * val_magneticfield_x = (uint32_t*) &(this->magneticfield_x);
      offset += 3;
      *val_magneticfield_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_magneticfield_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_magneticfield_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_magneticfield_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_magneticfield_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_magneticfield_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_magneticfield_x !=0)
        *val_magneticfield_x |= ((exp_magneticfield_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->magneticfield_x = -this->magneticfield_x;
      uint32_t * val_magneticfield_y = (uint32_t*) &(this->magneticfield_y);
      offset += 3;
      *val_magneticfield_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_magneticfield_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_magneticfield_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_magneticfield_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_magneticfield_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_magneticfield_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_magneticfield_y !=0)
        *val_magneticfield_y |= ((exp_magneticfield_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->magneticfield_y = -this->magneticfield_y;
      uint32_t * val_magneticfield_z = (uint32_t*) &(this->magneticfield_z);
      offset += 3;
      *val_magneticfield_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_magneticfield_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_magneticfield_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_magneticfield_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_magneticfield_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_magneticfield_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_magneticfield_z !=0)
        *val_magneticfield_z |= ((exp_magneticfield_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->magneticfield_z = -this->magneticfield_z;
      uint32_t * val_gyroscope_x = (uint32_t*) &(this->gyroscope_x);
      offset += 3;
      *val_gyroscope_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_gyroscope_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_gyroscope_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_gyroscope_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_gyroscope_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_gyroscope_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_gyroscope_x !=0)
        *val_gyroscope_x |= ((exp_gyroscope_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->gyroscope_x = -this->gyroscope_x;
      uint32_t * val_gyroscope_y = (uint32_t*) &(this->gyroscope_y);
      offset += 3;
      *val_gyroscope_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_gyroscope_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_gyroscope_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_gyroscope_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_gyroscope_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_gyroscope_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_gyroscope_y !=0)
        *val_gyroscope_y |= ((exp_gyroscope_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->gyroscope_y = -this->gyroscope_y;
      uint32_t * val_gyroscope_z = (uint32_t*) &(this->gyroscope_z);
      offset += 3;
      *val_gyroscope_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_gyroscope_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_gyroscope_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_gyroscope_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_gyroscope_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_gyroscope_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_gyroscope_z !=0)
        *val_gyroscope_z |= ((exp_gyroscope_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->gyroscope_z = -this->gyroscope_z;
      uint32_t * val_light = (uint32_t*) &(this->light);
      offset += 3;
      *val_light = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_light |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_light |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_light |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_light = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_light |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_light !=0)
        *val_light |= ((exp_light)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->light = -this->light;
      uint32_t * val_pressure = (uint32_t*) &(this->pressure);
      offset += 3;
      *val_pressure = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_pressure |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_pressure |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_pressure |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_pressure = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_pressure |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_pressure !=0)
        *val_pressure |= ((exp_pressure)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->pressure = -this->pressure;
      union {
        bool real;
        uint8_t base;
      } u_proximity;
      u_proximity.base = 0;
      u_proximity.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
      this->proximity = u_proximity.real;
      offset += sizeof(this->proximity);
      uint32_t * val_gravity_x = (uint32_t*) &(this->gravity_x);
      offset += 3;
      *val_gravity_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_gravity_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_gravity_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_gravity_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_gravity_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_gravity_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_gravity_x !=0)
        *val_gravity_x |= ((exp_gravity_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->gravity_x = -this->gravity_x;
      uint32_t * val_gravity_y = (uint32_t*) &(this->gravity_y);
      offset += 3;
      *val_gravity_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_gravity_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_gravity_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_gravity_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_gravity_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_gravity_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_gravity_y !=0)
        *val_gravity_y |= ((exp_gravity_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->gravity_y = -this->gravity_y;
      uint32_t * val_gravity_z = (uint32_t*) &(this->gravity_z);
      offset += 3;
      *val_gravity_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_gravity_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_gravity_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_gravity_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_gravity_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_gravity_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_gravity_z !=0)
        *val_gravity_z |= ((exp_gravity_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->gravity_z = -this->gravity_z;
      uint32_t * val_linear_acceleration_x = (uint32_t*) &(this->linear_acceleration_x);
      offset += 3;
      *val_linear_acceleration_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_linear_acceleration_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_linear_acceleration_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_linear_acceleration_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_linear_acceleration_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_linear_acceleration_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_linear_acceleration_x !=0)
        *val_linear_acceleration_x |= ((exp_linear_acceleration_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->linear_acceleration_x = -this->linear_acceleration_x;
      uint32_t * val_linear_acceleration_y = (uint32_t*) &(this->linear_acceleration_y);
      offset += 3;
      *val_linear_acceleration_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_linear_acceleration_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_linear_acceleration_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_linear_acceleration_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_linear_acceleration_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_linear_acceleration_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_linear_acceleration_y !=0)
        *val_linear_acceleration_y |= ((exp_linear_acceleration_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->linear_acceleration_y = -this->linear_acceleration_y;
      uint32_t * val_linear_acceleration_z = (uint32_t*) &(this->linear_acceleration_z);
      offset += 3;
      *val_linear_acceleration_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_linear_acceleration_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_linear_acceleration_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_linear_acceleration_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_linear_acceleration_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_linear_acceleration_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_linear_acceleration_z !=0)
        *val_linear_acceleration_z |= ((exp_linear_acceleration_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->linear_acceleration_z = -this->linear_acceleration_z;
      uint32_t * val_rotation_vector_x = (uint32_t*) &(this->rotation_vector_x);
      offset += 3;
      *val_rotation_vector_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_rotation_vector_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_rotation_vector_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_rotation_vector_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_rotation_vector_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_rotation_vector_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_rotation_vector_x !=0)
        *val_rotation_vector_x |= ((exp_rotation_vector_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->rotation_vector_x = -this->rotation_vector_x;
      uint32_t * val_rotation_vector_y = (uint32_t*) &(this->rotation_vector_y);
      offset += 3;
      *val_rotation_vector_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_rotation_vector_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_rotation_vector_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_rotation_vector_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_rotation_vector_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_rotation_vector_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_rotation_vector_y !=0)
        *val_rotation_vector_y |= ((exp_rotation_vector_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->rotation_vector_y = -this->rotation_vector_y;
      uint32_t * val_rotation_vector_z = (uint32_t*) &(this->rotation_vector_z);
      offset += 3;
      *val_rotation_vector_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_rotation_vector_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_rotation_vector_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_rotation_vector_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_rotation_vector_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_rotation_vector_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_rotation_vector_z !=0)
        *val_rotation_vector_z |= ((exp_rotation_vector_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->rotation_vector_z = -this->rotation_vector_z;
      uint32_t * val_rotation_vector_optional = (uint32_t*) &(this->rotation_vector_optional);
      offset += 3;
      *val_rotation_vector_optional = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_rotation_vector_optional |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_rotation_vector_optional |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_rotation_vector_optional |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_rotation_vector_optional = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_rotation_vector_optional |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_rotation_vector_optional !=0)
        *val_rotation_vector_optional |= ((exp_rotation_vector_optional)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->rotation_vector_optional = -this->rotation_vector_optional;
      uint32_t * val_orientation_x = (uint32_t*) &(this->orientation_x);
      offset += 3;
      *val_orientation_x = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_orientation_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_orientation_x |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_orientation_x |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_orientation_x = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_orientation_x |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_orientation_x !=0)
        *val_orientation_x |= ((exp_orientation_x)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->orientation_x = -this->orientation_x;
      uint32_t * val_orientation_y = (uint32_t*) &(this->orientation_y);
      offset += 3;
      *val_orientation_y = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_orientation_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_orientation_y |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_orientation_y |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_orientation_y = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_orientation_y |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_orientation_y !=0)
        *val_orientation_y |= ((exp_orientation_y)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->orientation_y = -this->orientation_y;
      uint32_t * val_orientation_z = (uint32_t*) &(this->orientation_z);
      offset += 3;
      *val_orientation_z = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_orientation_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_orientation_z |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_orientation_z |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_orientation_z = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_orientation_z |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_orientation_z !=0)
        *val_orientation_z |= ((exp_orientation_z)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->orientation_z = -this->orientation_z;
      uint32_t * val_relative_humidity = (uint32_t*) &(this->relative_humidity);
      offset += 3;
      *val_relative_humidity = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_relative_humidity |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_relative_humidity |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_relative_humidity |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_relative_humidity = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_relative_humidity |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_relative_humidity !=0)
        *val_relative_humidity |= ((exp_relative_humidity)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->relative_humidity = -this->relative_humidity;
      uint32_t * val_temperature = (uint32_t*) &(this->temperature);
      offset += 3;
      *val_temperature = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_temperature |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_temperature |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_temperature |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_temperature = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_temperature |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_temperature !=0)
        *val_temperature |= ((exp_temperature)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->temperature = -this->temperature;
      uint32_t * val_ambient_temperature = (uint32_t*) &(this->ambient_temperature);
      offset += 3;
      *val_ambient_temperature = ((uint32_t)(*(inbuffer + offset++))>>5 & 0x07);
      *val_ambient_temperature |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<3;
      *val_ambient_temperature |= ((uint32_t)(*(inbuffer + offset++)) & 0xff)<<11;
      *val_ambient_temperature |= ((uint32_t)(*(inbuffer + offset)) & 0x0f)<<19;
      uint32_t exp_ambient_temperature = ((uint32_t)(*(inbuffer + offset++))&0xf0)>>4;
      exp_ambient_temperature |= ((uint32_t)(*(inbuffer + offset)) & 0x7f)<<4;
      if(exp_ambient_temperature !=0)
        *val_ambient_temperature |= ((exp_ambient_temperature)-1023+127)<<23;
      if( ((*(inbuffer+offset++)) & 0x80) > 0) this->ambient_temperature = -this->ambient_temperature;
     return offset;
    }

    const char * getType(){ return "jsk_gui_msgs/DeviceSensorALL"; };
    const char * getMD5(){ return "c6760fdd899a253540b8dfd19f6a9ed4"; };

  };

}
#endif